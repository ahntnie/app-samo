import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'dart:io';
import 'dart:async';

/// ErrorHandler - Smart error parsing and user-friendly error messages
/// 
/// Usage:
/// ```dart
/// try {
///   await someOperation();
/// } catch (e) {
///   await ErrorHandler.showErrorDialog(
///     context: context,
///     title: 'L·ªói t·∫°o phi·∫øu',
///     error: e,
///     showRetry: false,
///   );
/// }
/// ```
class ErrorHandler {
  /// Show error dialog v·ªõi user-friendly message
  /// 
  /// Returns: true if user clicked retry, false otherwise
  static Future<bool> showErrorDialog({
    required BuildContext context,
    required String title,
    required dynamic error,
    bool showRetry = false,
  }) async {
    final userMessage = _parseError(error);
    
    if (!context.mounted) return false;
    
    final result = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            const Icon(Icons.error_outline, color: Colors.red, size: 28),
            const SizedBox(width: 12),
            Expanded(
              child: Text(
                title,
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.red,
                ),
              ),
            ),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              userMessage,
              style: const TextStyle(fontSize: 15),
            ),
            const SizedBox(height: 16),
            const Divider(),
            const SizedBox(height: 8),
            Row(
              children: const [
                Icon(Icons.info_outline, size: 16, color: Colors.grey),
                SizedBox(width: 8),
                Expanded(
                  child: Text(
                    'N·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp di·ªÖn, vui l√≤ng ch·ª•p m√†n h√¨nh v√† li√™n h·ªá h·ªó tr·ª£.',
                    style: TextStyle(fontSize: 12, color: Colors.grey),
                  ),
                ),
              ],
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('ƒê√≥ng'),
          ),
          if (showRetry)
            ElevatedButton(
              onPressed: () => Navigator.pop(context, true),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
              ),
              child: const Text('Th·ª≠ l·∫°i'),
            ),
        ],
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(12),
        ),
      ),
    );
    
    return result ?? false;
  }

  /// Parse error v√† convert th√†nh user-friendly message
  static String _parseError(dynamic error) {
    // Convert error to string for analysis
    final errorString = error.toString().toLowerCase();
    
    // PostgrestException - Database errors
    if (error is PostgrestException) {
      return _parsePostgrestException(error);
    }
    
    // Network errors
    if (error is SocketException) {
      return '‚ùå Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng\n\n'
          'Vui l√≤ng ki·ªÉm tra:\n'
          '‚Ä¢ WiFi ho·∫∑c 4G/5G ƒë√£ b·∫≠t ch∆∞a?\n'
          '‚Ä¢ K·∫øt n·ªëi m·∫°ng c√≥ ·ªïn ƒë·ªãnh kh√¥ng?\n'
          '‚Ä¢ Th·ª≠ t·∫Øt v√† b·∫≠t l·∫°i WiFi/4G';
    }
    
    if (error is TimeoutException || errorString.contains('timeout')) {
      return '‚è±Ô∏è K·∫øt n·ªëi qu√° ch·∫≠m\n\n'
          'M·∫°ng hi·ªán t·∫°i ƒëang ch·∫≠m ho·∫∑c kh√¥ng ·ªïn ƒë·ªãnh.\n\n'
          'Vui l√≤ng:\n'
          '‚Ä¢ Th·ª≠ l·∫°i sau v√†i gi√¢y\n'
          '‚Ä¢ Ki·ªÉm tra t√≠n hi·ªáu m·∫°ng\n'
          '‚Ä¢ Di chuy·ªÉn ƒë·∫øn n∆°i c√≥ s√≥ng t·ªët h∆°n';
    }
    
    if (error is HttpException || errorString.contains('http')) {
      return 'üåê L·ªói k·∫øt n·ªëi m√°y ch·ªß\n\n'
          'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.\n\n'
          'Vui l√≤ng:\n'
          '‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng\n'
          '‚Ä¢ Th·ª≠ l·∫°i sau v√†i ph√∫t\n'
          '‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp di·ªÖn';
    }
    
    // File/Storage errors
    if (error is FileSystemException || errorString.contains('file')) {
      return 'üíæ L·ªói l∆∞u file\n\n'
          'Kh√¥ng th·ªÉ l∆∞u file v√†o thi·∫øt b·ªã.\n\n'
          'Vui l√≤ng ki·ªÉm tra:\n'
          '‚Ä¢ Dung l∆∞·ª£ng b·ªô nh·ªõ c√≤n ƒë·ªß kh√¥ng?\n'
          '‚Ä¢ Quy·ªÅn truy c·∫≠p b·ªô nh·ªõ ƒë√£ ƒë∆∞·ª£c c·∫•p ch∆∞a?\n'
          '‚Ä¢ Th·ª≠ x√≥a b·ªõt file c≈© ƒë·ªÉ gi·∫£i ph√≥ng dung l∆∞·ª£ng';
    }
    
    if (errorString.contains('permission') && errorString.contains('denied')) {
      return 'üîí Thi·∫øu quy·ªÅn truy c·∫≠p\n\n'
          '·ª®ng d·ª•ng c·∫ßn quy·ªÅn truy c·∫≠p b·ªô nh·ªõ.\n\n'
          'Vui l√≤ng:\n'
          '‚Ä¢ V√†o C√†i ƒë·∫∑t ‚Üí ·ª®ng d·ª•ng ‚Üí [T√™n app]\n'
          '‚Ä¢ C·∫•p quy·ªÅn "L∆∞u tr·ªØ" ho·∫∑c "Files and Media"\n'
          '‚Ä¢ Th·ª≠ l·∫°i sau khi c·∫•p quy·ªÅn';
    }
    
    // Format errors
    if (errorString.contains('format') || errorString.contains('parse')) {
      return '‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá\n\n'
          'D·ªØ li·ªáu nh·∫≠p v√†o kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.\n\n'
          'Vui l√≤ng ki·ªÉm tra l·∫°i:\n'
          '‚Ä¢ S·ªë ti·ªÅn, s·ªë l∆∞·ª£ng c√≥ ƒë√∫ng kh√¥ng?\n'
          '‚Ä¢ ƒê·ªãnh d·∫°ng ng√†y th√°ng c√≥ ch√≠nh x√°c kh√¥ng?\n'
          '‚Ä¢ C√°c tr∆∞·ªùng b·∫Øt bu·ªôc ƒë√£ nh·∫≠p ƒë·∫ßy ƒë·ªß ch∆∞a?';
    }
    
    // Type errors
    if (errorString.contains('type') && errorString.contains('subtype')) {
      return '‚ö†Ô∏è L·ªói d·ªØ li·ªáu\n\n'
          'D·ªØ li·ªáu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng h·ªá th·ªëng y√™u c·∫ßu.\n\n'
          'Vui l√≤ng:\n'
          '‚Ä¢ Ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p\n'
          '‚Ä¢ Th·ª≠ l√†m m·ªõi trang v√† nh·∫≠p l·∫°i\n'
          '‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp di·ªÖn';
    }
    
    // Default fallback
    return '‚ùå ƒê√£ x·∫£y ra l·ªói\n\n'
        'H·ªá th·ªëng g·∫∑p s·ª± c·ªë kh√¥ng x√°c ƒë·ªãnh.\n\n'
        'Vui l√≤ng:\n'
        '‚Ä¢ Th·ª≠ l·∫°i sau v√†i gi√¢y\n'
        '‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng\n'
        '‚Ä¢ Ch·ª•p m√†n h√¨nh l·ªói n√†y v√† li√™n h·ªá h·ªó tr·ª£\n\n'
        'Chi ti·∫øt k·ªπ thu·∫≠t: ${error.toString().substring(0, error.toString().length > 100 ? 100 : error.toString().length)}...';
  }

  /// Parse PostgrestException th√†nh user-friendly message
  static String _parsePostgrestException(PostgrestException error) {
    final code = error.code ?? '';
    final message = error.message.toLowerCase();
    
    // Foreign key violation
    if (code == '23503' || message.contains('foreign key') || message.contains('violates foreign key')) {
      return 'üîó D·ªØ li·ªáu li√™n quan kh√¥ng t·ªìn t·∫°i\n\n'
          'Kh√¥ng th·ªÉ th·ª±c hi·ªán thao t√°c v√¨ thi·∫øu d·ªØ li·ªáu li√™n quan.\n\n'
          'Vui l√≤ng ki·ªÉm tra:\n'
          '‚Ä¢ Kh√°ch h√†ng/Nh√† cung c·∫•p ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a?\n'
          '‚Ä¢ S·∫£n ph·∫©m c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng?\n'
          '‚Ä¢ Kho h√†ng ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p ch∆∞a?\n'
          '‚Ä¢ T√†i kho·∫£n t√†i ch√≠nh ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a?';
    }
    
    // Unique constraint violation
    if (code == '23505' || message.contains('unique') || message.contains('duplicate')) {
      return '‚ö†Ô∏è D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i\n\n'
          'Kh√¥ng th·ªÉ t·∫°o v√¨ d·ªØ li·ªáu n√†y ƒë√£ c√≥ trong h·ªá th·ªëng.\n\n'
          'Vui l√≤ng ki·ªÉm tra:\n'
          '‚Ä¢ T√™n kh√°ch h√†ng/s·∫£n ph·∫©m ƒë√£ tr√πng ch∆∞a?\n'
          '‚Ä¢ IMEI ƒë√£ ƒë∆∞·ª£c nh·∫≠p v√†o h·ªá th·ªëng ch∆∞a?\n'
          '‚Ä¢ S·ªë phi·∫øu/m√£ giao d·ªãch ƒë√£ t·ªìn t·∫°i ch∆∞a?\n\n'
          'Th·ª≠ d√πng t√™n/m√£ kh√°c ho·∫∑c t√¨m ki·∫øm d·ªØ li·ªáu c≈©.';
    }
    
    // Not null violation
    if (code == '23502' || message.contains('null value') || message.contains('not-null')) {
      return 'üìù Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc\n\n'
          'M·ªôt s·ªë tr∆∞·ªùng th√¥ng tin b·∫Øt bu·ªôc ch∆∞a ƒë∆∞·ª£c nh·∫≠p.\n\n'
          'Vui l√≤ng ki·ªÉm tra v√† nh·∫≠p ƒë·∫ßy ƒë·ªß:\n'
          '‚Ä¢ T√™n kh√°ch h√†ng/s·∫£n ph·∫©m\n'
          '‚Ä¢ S·ªë ti·ªÅn/s·ªë l∆∞·ª£ng\n'
          '‚Ä¢ Ng√†y th√°ng\n'
          '‚Ä¢ C√°c tr∆∞·ªùng c√≥ d·∫•u (*) b·∫Øt bu·ªôc';
    }
    
    // Check constraint violation
    if (code == '23514' || message.contains('check constraint')) {
      return '‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá\n\n'
          'D·ªØ li·ªáu nh·∫≠p v√†o kh√¥ng th·ªèa m√£n ƒëi·ªÅu ki·ªán c·ªßa h·ªá th·ªëng.\n\n'
          'Vui l√≤ng ki·ªÉm tra:\n'
          '‚Ä¢ S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0\n'
          '‚Ä¢ S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë d∆∞∆°ng\n'
          '‚Ä¢ Ng√†y th√°ng ph·∫£i h·ª£p l·ªá\n'
          '‚Ä¢ Gi√° tr·ªã n·∫±m trong kho·∫£ng cho ph√©p';
    }
    
    // Permission errors
    if (code == '401' || message.contains('unauthorized')) {
      return 'üîí Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p\n\n'
          'B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.\n\n'
          'Vui l√≤ng:\n'
          '‚Ä¢ ƒêƒÉng nh·∫≠p l·∫°i\n'
          '‚Ä¢ Ki·ªÉm tra quy·ªÅn h·∫°n c·ªßa t√†i kho·∫£n\n'
          '‚Ä¢ Li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ c·∫•p quy·ªÅn';
    }
    
    if (code == '403' || message.contains('forbidden')) {
      return 'üö´ Quy·ªÅn truy c·∫≠p b·ªã t·ª´ ch·ªëi\n\n'
          'T√†i kho·∫£n c·ªßa b·∫°n kh√¥ng ƒë∆∞·ª£c ph√©p th·ª±c hi·ªán thao t√°c n√†y.\n\n'
          'Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ:\n'
          '‚Ä¢ Ki·ªÉm tra quy·ªÅn h·∫°n t√†i kho·∫£n\n'
          '‚Ä¢ Y√™u c·∫ßu c·∫•p quy·ªÅn ph√π h·ª£p\n'
          '‚Ä¢ X√°c nh·∫≠n vai tr√≤ c·ªßa b·∫°n trong h·ªá th·ªëng';
    }
    
    // Row level security
    if (message.contains('row') && message.contains('security')) {
      return 'üîê L·ªói b·∫£o m·∫≠t d·ªØ li·ªáu\n\n'
          'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p d·ªØ li·ªáu n√†y.\n\n'
          'Vui l√≤ng:\n'
          '‚Ä¢ Ki·ªÉm tra b·∫°n ƒëang ƒëƒÉng nh·∫≠p ƒë√∫ng t√†i kho·∫£n ch∆∞a\n'
          '‚Ä¢ Li√™n h·ªá qu·∫£n tr·ªã vi√™n n·∫øu c·∫ßn truy c·∫≠p\n'
          '‚Ä¢ ƒê·∫£m b·∫£o b·∫°n c√≥ quy·ªÅn v·ªõi d·ªØ li·ªáu n√†y';
    }
    
    // Default Supabase error
    return 'üîß L·ªói c∆° s·ªü d·ªØ li·ªáu\n\n'
        'H·ªá th·ªëng g·∫∑p s·ª± c·ªë khi x·ª≠ l√Ω d·ªØ li·ªáu.\n\n'
        'Vui l√≤ng:\n'
        '‚Ä¢ Ki·ªÉm tra l·∫°i th√¥ng tin ƒë√£ nh·∫≠p\n'
        '‚Ä¢ Th·ª≠ l·∫°i sau v√†i gi√¢y\n'
        '‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ n·∫øu v·∫•n ƒë·ªÅ v·∫´n ti·∫øp di·ªÖn\n\n'
        'M√£ l·ªói: ${error.code ?? "unknown"}';
  }
}
